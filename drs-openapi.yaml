openapi: 3.0.3
x-stoplight:
  id: x0k3zcu2ovr68
info:
  title: DRS API Representation
  contact:
    name: Dawid Brylka
    url: 'https://www.kaucja.pl'
    email: dawid.brylka@kaucja.pl
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://drs.kaucja.pl/api/v3'
paths:
  /product:
    post:
      operationId: productPost
      tags:
        - product
      summary: Add or update product
      description: |
        Endpoint responsible for adding, or updating new product by Introducers. <br>
        Caling in will cause change in DRS and delayed change in RVM systems.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPost'
      responses:
        '200':
          $ref: '#/components/responses/200PostReturnId'
        '400':
          $ref: '#/components/responses/400ValidationFailed'
    get:
      tags:
        - products
      summary: Get product data
      parameters:
        - name: sendImages
          in: query
          description: Shall we send images to RVM
          required: false
          schema:
            type: boolean
            default: false
        - name: updatedAfter
          in: query
          description: Display items updated After
          required: false
          schema:
            type: string
            format: date-time
        - name: createdAfter
          in: query
          description: Display items created After
          required: false
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/Startindex'
        - $ref: '#/components/parameters/Pagelength'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  pageNo:
                    type: integer
                  pageSize:
                    type: integer
                  totalItemCount:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      x-stoplight:
        id: i8big2em2kghv
  '/product/{ean}':
    get:
      tags:
        - products
      summary: Get product data
      description: |
        Get data of single product.
      parameters:
        - name: sendImages
          in: query
          description: Shall we send images to RVM
          required: false
          schema:
            type: boolean
            default: false
        - name: ean
          in: path
          description: Ean that should be synced
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '422':
          description: Duplicate ID. Please provide unique ID for Transaction Entity
      x-stoplight:
        id: 5o6n5p23xf20f
  /transaction:
    post:
      tags:
        - transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: models/Transaction.yaml
      summary: Post single Transaction
      description: Post single Transaction
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '409':
          $ref: '#/components/responses/409Conflict'
        '422':
          description: Validation exception
      x-stoplight:
        id: sbyw8qv8u7gj8
  /transaction/bulk:
    post:
      tags:
        - transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: models/Transaction.yaml
      summary: Post multiple Transaction
      description: Post multiple Transaction
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '409':
          $ref: '#/components/responses/409Conflict'
        '422':
          description: Validation exception
      x-stoplight:
        id: zpsfrh56cuuti
  /bag-replacement:
    post:
      tags:
        - rvm
      summary: Trigger an replacement action for RVM
      description: Trigger an replacement action for RVM
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BagReplacement'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '409':
          $ref: '#/components/responses/409Conflict'
        '422':
          description: Validation exception
      x-stoplight:
        id: 3r55dg8tllqbx
  /bag-seal:
    post:
      tags:
        - rvm
      summary: Call performed when bag seal is performed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BagSeal'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      x-stoplight:
        id: lqz2mv777xppe
  /bag-is-full:
    post:
      tags:
        - rvm
      summary: Call performed when bag is full
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BagFull'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      x-stoplight:
        id: d1asmq08b0uj1
  '/machine/{id}/registered':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    head:
      summary: Query For Machine in DRS system
      tags:
        - machine
      responses:
        '200':
          description: Machine is known and registered in Kaucja DRS
        '404':
          description: Unknown Machine
      operationId: get-machine-id-registered
      x-stoplight:
        id: l2akxxutrhklj
# '/product/{ean}/mapping':
#   parameters:
#     - schema:
#         type: string
#       name: ean
#       in: path
#       required: true
#   get:
#     summary: EAN Mapping
#     description: | 
#       Special endpoint to discover whether there are similar bottles with different EAN,
#       that DRS is aware 
#     tags: []
#     responses: {}
#     operationId: get-product-ean-mapping
#     x-stoplight:
#       id: d988ysn6j49w8
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Pagelength:
      name: pagelength
      in: query
      description: Number of records to return
      schema:
        type: number
    Startindex:
      name: startindex
      in: query
      description: Start index for paging
      schema:
        type: number
  schemas:
    WasteTypeEnum:
      type: integer
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
      description: |
        Descriptor for Waste Type <br>
        Where:
        * 1 - PET

        * 2 - Glass

        * 3 - Steel

        * 4 - Aluminium

        * 5 - Steel with Aluminium

        * 6 - Steel with widget

        * 7 - Aluminium with widget

        * 8 - Other

        * 9 - HDPE

        * 10 - Plastic
      x-stoplight:
        id: 3unh3056vk4oi
    SleeveMaterialCode:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      description: |
        Possible materials for bottle labels with corresponding integer IDs:
        * 0 - Paper
        * 1 - Vinyl
        * 2 - Polyester
        * 3 - Polypropylene
        * 4 - PVC
      x-stoplight:
        id: 29qz1jfi9abe6
    ColorEnum:
      type: integer
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
      description: |
        Descriptor for ColorID <br> Where:
        * 1 - Clear
        * 2 - Brown
        * 3 - Green
        * 4 - Blue
        * 5 - Other
      x-stoplight:
        id: zgvd9d6cx1n0h
    ProductStatusEnum:
      title: ProductStatusEnum
      type: integer
      enum:
        - 1
        - 2
      description: |
        Descriptor for Product Status <br> Where:
        * 1 - RVM should reject those items
        * 2 - Item should be accepted by RVM.
    BagSeal:
      type: object
      properties:
        sealNumber:
          type: string
        bagId:
          type: string
          format: uuid
        sealTime:
          type: string
          format: date-time
      x-stoplight:
        id: cyqmwjxrizrej
    BagFull:
      type: object
      properties:
        rvmId:
          type: string
          format: uuid
        binId:
          type: string
          format: uuid
        overflowDate:
          type: string
          format: date-time
      x-stoplight:
        id: ddq57l9gf506c
    ProductPost:
      type: object
      required:
        - ean
        - name
        - publishedName
        - market
        - productStatusId
        - packaging
        - diameters
        - weight
      properties:
        ean:
          type: string
          format: gid
        name:
          type: string
        publishedName:
          type: string
        
        market:
          type: object
          properties:
            entryDate:
              type: string
              format: date-time
            exitDate:
              type: string
              format: date-time
        refund:
          $ref: '#/components/schemas/Refund'
        productStatusId:
          $ref: '#/components/schemas/ProductStatusEnum'
        packaging:
          $ref: '#/components/schemas/Packaging'
        diameters:
          $ref: '#/components/schemas/Diameters'
        label:
          $ref: '#/components/schemas/Label'
        weight:
          $ref: '#/components/schemas/Weight'
        image:
          type: string
          format: binary
    Refund:
      type: object
      properties:
        amount:
          type: number
          example: 0.50
        currencyCode:
          type: string
          example: PLN
          description: Currency in which the refund should be made
    Product:
      type: object
      required:
        - id
        - ean
        - name
        - creationDate
        - updatedDate
        - market
        - packaging
        - diameters
        - label
        - weight
      allOf:
      - $ref: '#/components/schemas/ProductPost'
      - type: object
        properties:
          id:
            type: string
            format: uuid
          creationDate:
            type: string
            format: date-time
          updatedDate:
            type: string
            format: date-time
        x-stoplight:
          id: r6oyzy0txsfku
    Label:
      type: object
      required:
        - materialCode
      properties:
        materialCode:
          $ref: '#/components/schemas/SleeveMaterialCode'
        sleeveLabel:
          type: boolean
        image:
          type: string
          format: binary
      x-stoplight:
        id: wevouuv5rzcyg
    Weight:
      required:
        - withCap
      type: object
      properties:
        withoutCap:
          type: number
          description: Weight of bottle without cap in grams
        withCap:
          type: number
          description: Weight of bottle with cap in grams
        cap:
          type: number
          description: weight of cap in grams
        min:
          type: number
          description: minimal acceptable bottle weight in grams
        max:
          type: number
          description: maximal acceptable weight in grams
      x-stoplight:
        id: 2kp6z3666pbsf
    Packaging:
      type: object
      properties:
        reusable:
          type: boolean
        materialCode:
          $ref: '#/components/schemas/WasteTypeEnum'
        colorId:
          $ref: '#/components/schemas/ColorEnum'
        capColorId:
          $ref: '#/components/schemas/ColorEnum'
      x-stoplight:
        id: 37a1j4g8nh00w
    Diameters:
      type: object
      required:
        - volume
        - height
        - diagonal
      properties:
        volume:
          type: integer
          description: Declared volume in ml
          example: 400
        height:
          type: number
          description: Height of product in mm
        diameter:
          type: number
          description: Diameter of product in mm
      x-stoplight:
        id: x67kmnv7cx4h6
    ContainerFull:
      type: object
      required:
        - ean
        - count
      description: |
        Returns list of only accepted containers <br> Where one record contains only one occurence of EAN e.g. <br> { <br>
          "ean": "123422",<br>
          "count": 100, <br>
        }
      properties:
        ean:
          type: string
          example: '20123123'
        count:
          type: integer
          example: 20
        weight:
          type: integer
          description: Weight of collected containers in grams
      x-stoplight:
        id: tgu557sdjewef
    BagReplacement:
      type: object
      required:
        - id
        - rvmId
        - replacementDate
        - containers
      properties:
        id:
          type: string
          format: uuid
          description: ID of a bag in UUID format
        rvmId:
          type: string
          format: uuid
        sealNumber:
          type: string
          example: <SEAL NUMBER>
          description: |
            Optional. If RVM is able to seal bag on it's own it should send us seal number on this particular call.
        replacementDate:
          type: string
          format: date-time
        bagWeight:
          type: number
        containerAmount:
          type: integer
        relatedTransactionsIds:
          type: array
          items:
            type: string
            format: uuid
        containers:
          type: array
          items:
            $ref: '#/components/schemas/ContainerFull'
      x-stoplight:
        id: ty6l3ytww8zew

  responses:
    200PostReturnId:
      description: OK
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
    400ValidationFailed:
      description: Example response
      content:
        application/json:
          schema:
            $ref: "models/ErrorMessage.yaml"

    409Conflict:
      description: Example response
      content:
        application/json:
          schema:
            $ref: "models/ErrorMessage.yaml"
          examples: null
  examples:
    ConflictMessage:
      value:
        msg: Conflicting ID of the request.
        errorCode: 5
        path: <path of the request>
        
