openapi: 3.0.3
x-stoplight:
  id: x0k3zcu2ovr68
info:
  title: DRS API Representation
  contact:
    name: Dawid Brylka
    url: 'https://www.kaucja.pl'
    email: dawid.brylka@kaucja.pl
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://drs.kaucja.pl/api/v3'
paths:
  /product:
    post:
      operationId: productPost
      tags:
        - product
      summary: Add or update product
      description: |
        Endpoint responsible for adding, or updating new product by Introducers. <br>
        Caling in will cause change in DRS and delayed change in RVM systems.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: models/Product.yaml
      responses:
        '200':
          $ref: '#/components/responses/200PostReturnId'
        '400':
          $ref: '#/components/responses/400ValidationFailed'
    get:
      tags:
        - product
      summary: Get product data
      parameters:
        - name: sendImages
          in: query
          description: Shall we send images to RVM
          required: false
          schema:
            type: boolean
            default: false
        - name: updatedAfter
          in: query
          description: Display items updated After
          required: false
          schema:
            type: string
            format: date-time
        - name: createdAfter
          in: query
          description: Display items created After
          required: false
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/Startindex'
        - $ref: '#/components/parameters/Pagelength'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  pageNo:
                    type: integer
                  pageSize:
                    type: integer
                  totalItemCount:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: models/Product.yaml
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      x-stoplight:
        id: i8big2em2kghv
  '/product/{ean}':
    get:
      tags:
        - product
      summary: Get product data
      description: |
        Get data of single product.
      parameters:
        - name: sendImages
          in: query
          description: Shall we send images to RVM
          required: false
          schema:
            type: boolean
            default: false
        - name: ean
          in: path
          description: Ean that should be synced
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: models/Product.yaml
        '400':
          description: Invalid input
        '422':
          description: Duplicate ID. Please provide unique ID for Transaction Entity
      x-stoplight:
        id: 5o6n5p23xf20f
  /transaction:
    post:
      tags:
        - transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: models/Transaction.yaml
      summary: Post single Transaction
      description: Post single Transaction
      responses:
        '200':
          $ref: '#/components/responses/200TransactionProcessed'
        '400':
          $ref: '#/components/responses/400MachineUnknown'
        '409':
          $ref: '#/components/responses/409Conflict'
        '422':
          description: Validation exception
      x-stoplight:
        id: sbyw8qv8u7gj8
  /transaction/bulk:
    post:
      tags:
        - transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkTransaction'
      summary: Post multiple Transaction
      description: Post multiple Transaction
      responses:
        '200':
          $ref: '#/components/responses/200BulkTransactionProcessed'
        '400':
          $ref: '#/components/responses/400MachineUnknown'
        '409':
          $ref: '#/components/responses/409Conflict'
        '422':
          description: Validation exception
      x-stoplight:
        id: zpsfrh56cuuti
  /bag-replacement:
    post:
      tags:
        - rvm
      summary: Trigger an replacement action for RVM
      description: Trigger an replacement action for RVM
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BagReplacement'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '409':
          $ref: '#/components/responses/409Conflict'
        '422':
          description: Validation exception
      x-stoplight:
        id: 3r55dg8tllqbx
  /bag-seal:
    post:
      tags:
        - rvm
      summary: Call performed when bag seal is performed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BagSeal'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      x-stoplight:
        id: lqz2mv777xppe
  /bag-fill-status:
    post:
      tags:
        - rvm
      summary: Notify about bag fill level
      description: |
        This endpoint is used to notify DRS about the current fill level of a bag.
        It can be triggered at any configured threshold (e.g., 80% for warning, 100% when full).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BagFillStatus'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  '/machine/{id}':
    parameters:
      - $ref: '#/components/parameters/id'
    head:
      summary: Query For Machine in DRS system
      tags:
        - machine
      responses:
        '200':
          description: Machine is known and registered in Kaucja DRS
        '404':
          description: Unknown Machine
      operationId: get-machine-id-registered
      x-stoplight:
        id: l2akxxutrhklj
    post:
      summary: Machine Update
      description: |
        Endpoint used by RVM providers to notify DRS whether something changed to the RVM.
      tags:
        - machine
      requestBody:
        $ref: '#/components/requestBodies/MachineUpdate'
      responses:
        '200':
          description: Operation Successful
        '404':
          description: Unknown Machine
      operationId: get-machine-id-update
      x-stoplight:
        id: bu3ambgd8l19t
    delete:
      summary: Machine Delete
      description: |
        Endpoint used by RVM providers to notify DRS that machine was Deleted.
      tags:
        - machine
      responses:
        '200':
          description: Operation Successful
        '404':
          description: Unknown Machine
      operationId: get-machine-id-update
      x-stoplight:
        id: bu3ambgd8l19t1
  /machine:
    post:
      summary: Add new RVM to Collection Point
      description: |
        Endpoint used to Register new RVM in DRS system for given Collection Point.
      tags:
        - machine
      requestBody:
          $ref: "#/components/requestBodies/RegisterMachine"
      responses:
        '200':
          description: Operation Successful
        '404':
          description: Unknown Machine
      operationId: post-machine
      x-stoplight:
        id: ltd4iqkgs22yd
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Pagelength:
      name: pagelength
      in: query
      description: Number of records to return
      schema:
        type: number
    Startindex:
      name: startindex
      in: query
      description: Start index for paging
      schema:
        type: number
    id:
      name: id
      in: path
      required: true
      description: |
        Unique ID of RVM
      schema:
        type: string
  schemas:
    BagSeal:
      type: object
      properties:
        sealNumber:
          type: string
        bagId:
          type: string
          format: uuid
        sealTime:
          type: string
          format: date-time
      x-stoplight:
        id: cyqmwjxrizrej
    BagFillStatus:
      type: object
      properties:
        rvmId:
          type: string
          format: uuid
        binId:
          type: string
          format: uuid
          description: |
            (Optional) ID of bin that is filled out
        wasteType:
          type: array
          items:
            $ref: models/enum/WasteTypeEnum.yaml
        rvmBlocked:
          type: boolean
          example: false
          description: Defines whether Rvm was blocked from further usage
        fillLevelPercent:
          type: number
          format: float
          example: 0.8
          description: 'Fill level in percent (e.g., 0.8 for 80%)'
        reportedAt:
          type: string
          format: date-time
      required:
        - rvmId
        - wasteType
        - fillLevelPercent
        - rvmBlocked
        - reportedAt
    BagReplacement:
      type: object
      required:
        - bagId
        - rvmId
        - replacementDate
        - containers
      properties:
        bagId:
          type: string
          format: uuid
          description: ID of a bag in UUID format
        rvmId:
          type: string
          format: uuid
        sealNumber:
          type: string
          example: <SEAL NUMBER>
          description: |
            Optional. If RVM is able to seal bag on it's own it should send us seal number on this particular call.
        replacementDate:
          type: string
          format: date-time
        bagWeight:
          type: number
        containerAmount:
          type: integer
        relatedTransactionsIds:
          type: array
          items:
            type: string
            format: uuid
        containers:
          type: array
          items:
            $ref: models/ContainerFull.yaml
      x-stoplight:
        id: ty6l3ytww8zew
    BulkTransaction:
      title: BulkTransaction
      x-stoplight:
        id: 5g2jzhz7bryao
      type: array
      items:
        $ref: models/Transaction.yaml
    BulkTransactionConfirmation:
      title: Bulk Transaction Confrimation
      type: array
      items:
        allOf:
          - properties:
              transactionId:
                type: string
                format: uuid
                description: Unique ID of the transaction
          - $ref: '#/components/schemas/TransactionConfirmation'
    TransactionConfirmation:
      title: Transaction Confirmation
      x-stoplight:
        id: l9yurkyx2wr88
      type: object
      properties:
        blocked:
          type: boolean
          default: false
          description: Indicates whether the transaction is blocked from payment by RVM
        amount:
          type: number
          example: 10.5
          description: Amount to be paid by RVM for the returned bottles
        currency:
          type: string
          default: PLN
          description: Currency in which RVM pays for returned bottles
    MachineUpdate:
      title: Machine Update
      description: |
        Model representing what RVM provider can update in machines that are being stored in DRS
      x-stoplight:
        id: zk239eslozgw8
      type: object
      properties:
        location:
          $ref: models/Location.yaml
        bins:
          $ref: models/BinPost.yaml
    RegisterMachine:
      title: RegisterMachine
      x-stoplight:
        id: pavk7ohndqzt1
      type: object
      required:
        - rvmModelId
      allOf:
        - $ref: 'models/PostMachine.yaml'
        - properties:
            rvmModelId:
              type: string
              format: uuid
              description: Model of RVM that is used.
  responses:
    200PostReturnId:
      description: OK
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
    400ValidationFailed:
      description: Example response
      content:
        application/json:
          schema:
            $ref: models/ErrorMessage.yaml
    409Conflict:
      description: Example response
      content:
        application/json:
          schema:
            $ref: models/ErrorMessage.yaml
          examples: null
    200TransactionProcessed:
      description: |
        Response returned by transaction.
        Indicates whether coupon should be granted and for what amount. 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionConfirmation'
    200BulkTransactionProcessed:
      description: |
        Response returned by transaction.
        Indicates whether coupon should be granted and for what amount. 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BulkTransactionConfirmation'
    400MachineUnknown:
      description: Example response
      content:
        application/json:
          schema:
            $ref: models/ErrorMessage.yaml
          examples:
            machineUnknown:
              $ref: '#/components/examples/MachineUnknown'
    ConflictMessage:
      value:
        msg: Conflicting ID of the request.
        errorCode: 5
        path: <path of the request>
  requestBodies:
    MachineUpdate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MachineUpdate'
    RegisterMachine:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RegisterMachine"
  examples:
    MachineUnknown:
      values:
        msg: Machine doesn't belong to given DRS operator.
        errorCode: 8
        path: <path of the request>
